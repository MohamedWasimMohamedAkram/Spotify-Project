{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wsmga\\\\Desktop\\\\Text Analyzer\\\\src\\\\components\\\\Input.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Input() {\n  _s();\n\n  let textList = [];\n  const [inpText, setValue] = useState(\"\");\n  const [fullText, setFullText] = useState(\"\");\n  const [wordCount, setWordCount] = useState(0);\n  const [letterCount, setLetterCount] = useState(0);\n  const [longestWordState, setLongestWord] = useState(\"\");\n  const [avgWordLength, setAvgLength] = useState(0);\n  const [readingTimeSecs, setReadingTime] = useState(0);\n  const [medianWordLength, setMedianLength] = useState(0);\n  const [medianSortLength, setMedianSortLength] = useState(0);\n  const [fiveCommonWords, setCommonWords] = useState(\"\");\n  const [textLanguage, setTextLanguage] = useState(\"\");\n  textList = inpText.split(/\\s*[\\s,]\\s*/);\n  let avgLength = (inpText.length / textList.length).toFixed(2);\n  let chars = inpText.length;\n  let wordLength = textList.length;\n  let readingTime = Math.round(textList.length / 200 * 60);\n  let medianLength = textList[Math.floor(textList.length / 2)];\n  let commonWordsArr = commonWords();\n  let str = \" \";\n\n  function handleChange(event) {\n    setValue(event.target.value);\n  }\n\n  function handleClick() {\n    setFullText(inpText);\n    setWordCount(wordLength);\n    setLetterCount(chars);\n    setLongestWord(longestWord());\n    setAvgLength(avgLength);\n    setReadingTime(readingTime);\n    setMedianLength(medianLength);\n    setMedianSortLength(sortedMedianLength());\n    setCommonWords(separate());\n    setTextLanguage(language());\n    console.log(\"Number of characters\", chars);\n    console.log(\"Number of words\", wordLength);\n    console.log(\"Longest Word\", longestWord());\n    console.log(\"Average Word Length\", avgLength);\n    console.log(\"Average Reading Time\", readingTime, \" seconds\");\n    console.log(\"Median Word Length\", medianLength);\n    console.log(\"Median word when sorted, \", sortedMedianLength());\n    console.log(separate());\n    console.log(language());\n  }\n\n  function separate() {\n    var str = commonWordsArr.join(\", \");\n    return str;\n  }\n\n  function longestWord() {\n    let max = 0;\n    let wordMax = \"\";\n\n    for (var i = 0; i < textList.length; i++) {\n      if (textList[i].length > max) {\n        max = textList[i].length;\n        wordMax = textList[i];\n      }\n    }\n\n    return wordMax;\n  }\n\n  function sortedMedianLength() {\n    const asc = textList.sort((a, b) => a.length - b.length);\n    return asc[Math.floor(asc.length / 2)];\n  }\n\n  function commonWords() {\n    let regex = \".*[a-zA-Z].*\";\n\n    if (inpText.match(regex)) {\n      let wordMap = new Map();\n      inpText.split(\" \").forEach(word => {\n        if (word) {\n          word = word.toLowerCase();\n\n          if (wordMap.has(word)) {\n            let count = wordMap.get(word);\n            count++;\n            wordMap.set(word, count);\n          } else {\n            wordMap.set(word, 1);\n          }\n        }\n      });\n      const sortedWordMap = new Map([...wordMap.entries()].sort((a, b) => b[1] - a[1]));\n      let result = Array.from(sortedWordMap.keys()).filter((word, index) => index < 5);\n      result = result.map(res => {\n        res = res.replace(/[/.,]/g, \"\");\n\n        if (res !== \"\") {\n          return res;\n        }\n      });\n      return result.filter(res => res !== undefined);\n    } else {\n      return [];\n    }\n  }\n\n  function language() {\n    for (let i = 0; i < textList.length; i++) {\n      if (textList[i].localeCompare(\"is\") === 0 || textList[i].localeCompare(\"and\") === 0 || textList[i].localeCompare(\"a\") === 0 || textList[i].localeCompare(\"you\") === 0 || textList[i].localeCompare(\"are\") === 0 || textList[i].localeCompare(\"I\") === 0 || textList[i].localeCompare(\"i\") === 0 || textList[i].localeCompare(\"to\") === 0) {\n        return \"English\";\n      }\n\n      if (textList[i].localeCompare(\"ve\") === 0 || textList[i].localeCompare(\"bir\") === 0 || textList[i].localeCompare(\"bu\") === 0 || textList[i].localeCompare(\"ve\") === 0 || textList[i].localeCompare(\"bu\") === 0 || textList[i].localeCompare(\"de\") === 0 || textList[i].localeCompare(\"da\") === 0 || textList[i].localeCompare(\"ben\") === 0) {\n        return \"Turkish\";\n      }\n    }\n\n    return \"\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"cr\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: handleChange,\n          className: \"textValue\",\n          name: \"text\",\n          rows: \"9\",\n          cols: \"70\",\n          id: \"input_text\",\n          placeholder: \"Enter Text\",\n          value: inpText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      className: \"button\",\n      children: \"Analyze\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"details\",\n      children: [\"Word Count: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: wordCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"details\",\n      children: [\"Letter Count: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: letterCount\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"details\",\n      children: [\"Longest Word: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: longestWordState\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"details\",\n      children: [\"Average Word Length: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: avgWordLength\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"details\",\n      children: [\"Reading time in seconds: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: readingTimeSecs\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"details\",\n      children: [\"Median Word Length: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: medianSortLength\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"details\",\n      children: [\"Median word when sorted by length: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: medianSortLength\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"details\",\n      children: [\"Top 5 most common words: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: fiveCommonWords\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"details\",\n      children: [\"Text Language: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: textLanguage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Input, \"zMR8gJs8Bxu2yxZJPiHKLQUxKAM=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/wsmga/Desktop/Text Analyzer/src/components/Input.jsx"],"names":["React","useState","Input","textList","inpText","setValue","fullText","setFullText","wordCount","setWordCount","letterCount","setLetterCount","longestWordState","setLongestWord","avgWordLength","setAvgLength","readingTimeSecs","setReadingTime","medianWordLength","setMedianLength","medianSortLength","setMedianSortLength","fiveCommonWords","setCommonWords","textLanguage","setTextLanguage","split","avgLength","length","toFixed","chars","wordLength","readingTime","Math","round","medianLength","floor","commonWordsArr","commonWords","str","handleChange","event","target","value","handleClick","longestWord","sortedMedianLength","separate","language","console","log","join","max","wordMax","i","asc","sort","a","b","regex","match","wordMap","Map","forEach","word","toLowerCase","has","count","get","set","sortedWordMap","entries","result","Array","from","keys","filter","index","map","res","replace","undefined","localeCompare"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nfunction Input() {\r\n  let textList = [];\r\n  const [inpText, setValue] = useState(\"\");\r\n  const [fullText, setFullText] = useState(\"\");\r\n  const [wordCount, setWordCount] = useState(0);\r\n  const [letterCount, setLetterCount] = useState(0);\r\n  const [longestWordState, setLongestWord] = useState(\"\");\r\n  const [avgWordLength, setAvgLength] = useState(0);\r\n  const [readingTimeSecs, setReadingTime] = useState(0);\r\n  const [medianWordLength, setMedianLength] = useState(0);\r\n  const [medianSortLength, setMedianSortLength] = useState(0);\r\n  const [fiveCommonWords, setCommonWords] = useState(\"\");\r\n  const [textLanguage, setTextLanguage] = useState(\"\");\r\n\r\n  textList = inpText.split(/\\s*[\\s,]\\s*/);\r\n  let avgLength = (inpText.length / textList.length).toFixed(2);\r\n  let chars = inpText.length;\r\n  let wordLength = textList.length;\r\n  let readingTime = Math.round((textList.length / 200) * 60);\r\n  let medianLength = textList[Math.floor(textList.length / 2)];\r\n  let commonWordsArr = commonWords();\r\n  let str = \" \";\r\n  function handleChange(event) {\r\n    setValue(event.target.value);\r\n  }\r\n  function handleClick() {\r\n    setFullText(inpText);\r\n    setWordCount(wordLength);\r\n    setLetterCount(chars);\r\n    setLongestWord(longestWord());\r\n    setAvgLength(avgLength);\r\n    setReadingTime(readingTime);\r\n    setMedianLength(medianLength);\r\n    setMedianSortLength(sortedMedianLength());\r\n    setCommonWords(separate());\r\n    setTextLanguage(language());\r\n    console.log(\"Number of characters\", chars);\r\n    console.log(\"Number of words\", wordLength);\r\n    console.log(\"Longest Word\", longestWord());\r\n    console.log(\"Average Word Length\", avgLength);\r\n    console.log(\"Average Reading Time\", readingTime, \" seconds\");\r\n    console.log(\"Median Word Length\", medianLength);\r\n    console.log(\"Median word when sorted, \", sortedMedianLength());\r\n    console.log(separate());\r\n    console.log(language());\r\n  }\r\n\r\n  function separate() {\r\n    var str = commonWordsArr.join(\", \");\r\n    return str;\r\n  }\r\n  function longestWord() {\r\n    let max = 0;\r\n    let wordMax = \"\";\r\n    for (var i = 0; i < textList.length; i++) {\r\n      if (textList[i].length > max) {\r\n        max = textList[i].length;\r\n        wordMax = textList[i];\r\n      }\r\n    }\r\n    return wordMax;\r\n  }\r\n\r\n  function sortedMedianLength() {\r\n    const asc = textList.sort((a, b) => a.length - b.length);\r\n    return asc[Math.floor(asc.length / 2)];\r\n  }\r\n\r\n  function commonWords() {\r\n    let regex = \".*[a-zA-Z].*\";\r\n    if (inpText.match(regex)) {\r\n      let wordMap = new Map();\r\n      inpText.split(\" \").forEach((word) => {\r\n        if (word) {\r\n          word = word.toLowerCase();\r\n          if (wordMap.has(word)) {\r\n            let count = wordMap.get(word);\r\n            count++;\r\n            wordMap.set(word, count);\r\n          } else {\r\n            wordMap.set(word, 1);\r\n          }\r\n        }\r\n      });\r\n      const sortedWordMap = new Map(\r\n        [...wordMap.entries()].sort((a, b) => b[1] - a[1])\r\n      );\r\n\r\n      let result = Array.from(sortedWordMap.keys()).filter(\r\n        (word, index) => index < 5\r\n      );\r\n      result = result.map((res) => {\r\n        res = res.replace(/[/.,]/g, \"\");\r\n        if (res !== \"\") {\r\n          return res;\r\n        }\r\n      });\r\n      return result.filter((res) => res !== undefined);\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  function language() {\r\n    for (let i = 0; i < textList.length; i++) {\r\n      if (\r\n        textList[i].localeCompare(\"is\") === 0 ||\r\n        textList[i].localeCompare(\"and\") === 0 ||\r\n        textList[i].localeCompare(\"a\") === 0 ||\r\n        textList[i].localeCompare(\"you\") === 0 ||\r\n        textList[i].localeCompare(\"are\") === 0 ||\r\n        textList[i].localeCompare(\"I\") === 0 ||\r\n        textList[i].localeCompare(\"i\") === 0 ||\r\n        textList[i].localeCompare(\"to\") === 0\r\n      ) {\r\n        return \"English\";\r\n      }\r\n      if (\r\n        textList[i].localeCompare(\"ve\") === 0 ||\r\n        textList[i].localeCompare(\"bir\") === 0 ||\r\n        textList[i].localeCompare(\"bu\") === 0 ||\r\n        textList[i].localeCompare(\"ve\") === 0 ||\r\n        textList[i].localeCompare(\"bu\") === 0 ||\r\n        textList[i].localeCompare(\"de\") === 0 ||\r\n        textList[i].localeCompare(\"da\") === 0 ||\r\n        textList[i].localeCompare(\"ben\") === 0\r\n      ) {\r\n        return \"Turkish\";\r\n      }\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  return (\r\n    <div className=\"cr\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm\">\r\n          <textarea\r\n            onChange={handleChange}\r\n            className=\"textValue\"\r\n            name=\"text\"\r\n            rows=\"9\"\r\n            cols=\"70\"\r\n            id=\"input_text\"\r\n            placeholder=\"Enter Text\"\r\n            value={inpText}\r\n          ></textarea>\r\n        </div>\r\n      </div>\r\n      <button onClick={handleClick} className=\"button\">\r\n        Analyze\r\n      </button>\r\n      <br />\r\n      <h3 className=\"details\">\r\n        Word Count: <strong>{wordCount}</strong>\r\n      </h3>\r\n      <h3 className=\"details\">\r\n        Letter Count: <strong>{letterCount}</strong>\r\n      </h3>\r\n      <h3 className=\"details\">\r\n        Longest Word: <strong>{longestWordState}</strong>\r\n      </h3>\r\n      <h3 className=\"details\">\r\n        Average Word Length: <strong>{avgWordLength}</strong>\r\n      </h3>\r\n      <h3 className=\"details\">\r\n        Reading time in seconds: <strong>{readingTimeSecs}</strong>\r\n      </h3>\r\n      <h3 className=\"details\">\r\n        Median Word Length: <strong>{medianSortLength}</strong>\r\n      </h3>\r\n      <h3 className=\"details\">\r\n        Median word when sorted by length: <strong>{medianSortLength}</strong>\r\n      </h3>\r\n      <h3 className=\"details\">\r\n        Top 5 most common words: <strong>{fiveCommonWords}</strong>\r\n      </h3>\r\n      <h3 className=\"details\">\r\n        Text Language: <strong>{textLanguage}</strong>\r\n      </h3>\r\n    </div>\r\n  );\r\n}\r\nexport default Input;\r\n"]},"metadata":{},"sourceType":"module"}